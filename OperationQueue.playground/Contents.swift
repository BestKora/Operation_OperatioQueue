import UIKit
import PlaygroundSupport
PlaygroundPage.current.needsIndefiniteExecution = true
//: # OperationQueue
//: `OperationQueue` –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ background.
//: ## –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
//: –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º default initializer; –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∞ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏
// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å printerQueue
let printerQueue = OperationQueue()

//printerQueue.maxConcurrentOperationCount = 2
//printerQueue.underlyingQueue = DispatchQueue(label: "...", qos: .userInitiated, attributes:.concurrent)
//: ## –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ `Operations` –Ω–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π
/*: –û–ø–µ—Ä–∞—Ü–∏–∏ `Operations` –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–∞ –æ—á–µ—Ä–µ–¥—å –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –∑–∞–º—ã–∫–∞–Ω–∏—è
 - –í–ê–ñ–ù–û:
 –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –æ—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ "–Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç"; —Ö–æ—Ç—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–∫–∞–∂—É—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
 \
 –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ `duration` :
 */
let concatenationOperation = BlockOperation {
    print ( "-------üíß" + "‚òÇÔ∏è")
    sleep(2)
}
concatenationOperation.qualityOfService = .userInitiated

// DONE: –î–æ–±–∞–≤–ª—è–µ–º 5 –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ—á–µ—Ä–µ–¥—å printerQueue

duration {
  
  printerQueue.addOperation {  print("–ö–∞–∂–¥—ã–π üçé"); sleep(2) }
  printerQueue.addOperation {  print("–û—Ö–æ—Ç–Ω–∏–∫ üçä");sleep(2) }
  printerQueue.addOperation {  print("–ñ–µ–ª–∞–µ—Ç üçã"); sleep(2) }
  printerQueue.addOperation {  print("–ó–Ω–∞—Ç—å üçè");  sleep(2) }
  printerQueue.addOperation {  print("–ì–¥–µ üíé");    sleep(2) }
  printerQueue.addOperation {  print("–°–∏–¥–∏—Ç üöô");  sleep(2) }
  printerQueue.addOperation {  print("–§–∞–∑–∞–Ω üçÜ");  sleep(2) }
  
  printerQueue.addOperation(concatenationOperation)

}

// DONE: –ò–∑–º–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
duration {
  printerQueue.waitUntilAllOperationsAreFinished()
}
//: ## –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
//: –¢–µ–ø–µ—Ä—å –±–æ–ª–µ–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä.
// –ò—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
let images = ["city", "dark_road", "train_day", "train_dusk", "train_night"].map { UIImage(named: "\($0).jpg") }

// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
var filteredImages = [UIImage]()
//: –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å filterQueue —Å –ø–æ–º–æ—â—å—é default initializer:
let filterQueue = OperationQueue()
//: –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å (serial queue) appendQueue –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –º–∞—Å—Å–∏–≤—É:
let appendQueue = OperationQueue()
appendQueue.maxConcurrentOperationCount = 1
//: –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è `completionBlock`:
for image in images {

  let filterOp = FilterOperation()
  filterOp.inputImage = image
  filterOp.completionBlock = {
    guard let output = filterOp.outputImage else { return }
    appendQueue.addOperation {
      filteredImages.append(output)
    }
  }
  filterQueue.addOperation(filterOp)
}
//: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∂–¥–∞—Ç—å—Å—è, –ø–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–µ–∂–¥–µ, —á–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
// –ñ–¥–µ–º...
duration {
filterQueue.waitUntilAllOperationsAreFinished()
}
//: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
filteredImages[0]

filteredImages[1]
filteredImages[4]
//filterOp.outputImage
PlaygroundPage.current.finishExecution()
